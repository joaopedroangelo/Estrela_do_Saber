import json
import os
from typing import Dict, Any
from langchain_openai import ChatOpenAI
from langchain_core.messages import SystemMessage, HumanMessage
from langchain_core.output_parsers import JsonOutputParser
from dotenv import load_dotenv
import os

load_dotenv()  # isso carrega o arquivo .env

class QuestionGeneratorAgent:
    """Agente respons√°vel por gerar quest√µes de m√∫ltipla escolha para alfabetiza√ß√£o"""
    
    def __init__(self):
        # the newest OpenAI model is "gpt-5" which was released August 7, 2025.
        # do not change this unless explicitly requested by the user
        api_key = os.environ.get("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY environment variable is required")
        self.llm = ChatOpenAI(
            model="gpt-5",
            api_key=api_key
        )
        self.parser = JsonOutputParser()
        self._question_counter = 100
    
    def generate_question(self, ano: int) -> Dict[str, Any]:
        """
        Gera uma quest√£o de m√∫ltipla escolha adaptada ao ano escolar
        
        Args:
            ano: Ano do ensino fundamental (1-5)
            
        Returns:
            Dict com formato exato: {"id": int, "disponivel": true, "question": str, "options": list, "answer": str}
        """
        
        # Adaptar conte√∫do ao ano escolar
        if ano <= 2:
            focus = "reconhecimento de letras, s√≠labas simples, palavras b√°sicas do cotidiano"
            complexity = "muito simples, com palavras de 2-4 letras"
        elif ano <= 4:
            focus = "forma√ß√£o de palavras, rimas, separa√ß√£o sil√°bica, interpreta√ß√£o de frases curtas"
            complexity = "simples, com palavras familiares de at√© 6 letras"
        else:
            focus = "interpreta√ß√£o de textos curtos, sin√¥nimos, ant√¥nimos, classifica√ß√£o de palavras"
            complexity = "moderado, com vocabul√°rio mais amplo"
        
        system_prompt = f"""Voc√™ √© um especialista em educa√ß√£o infantil e alfabetiza√ß√£o.
        Crie uma quest√£o de m√∫ltipla escolha para crian√ßas do {ano}¬∫ ano do ensino fundamental.

        FOCO: {focus}
        COMPLEXIDADE: {complexity}

        REGRAS OBRIGAT√ìRIAS:
        1. Use linguagem adequada para a idade (simples, clara, amig√°vel)
        2. Crie exatamente 4 op√ß√µes de resposta
        3. As op√ß√µes devem ser rotuladas como A, B, C, D
        4. Apenas UMA op√ß√£o deve estar correta
        5. As outras 3 op√ß√µes devem ser plaus√≠veis mas incorretas
        6. Use contextos l√∫dicos e divertidos (animais, brinquedos, natureza)
        
        RESPONDA APENAS EM JSON no formato EXATO:
        {{
            "question": "texto da pergunta aqui",
            "options": ["op√ß√£o A", "op√ß√£o B", "op√ß√£o C", "op√ß√£o D"],
            "answer": "A"
        }}"""
        
        human_prompt = f"Gere uma quest√£o de alfabetiza√ß√£o para o {ano}¬∫ ano."
        
        try:
            messages = [
                SystemMessage(content=system_prompt),
                HumanMessage(content=human_prompt)
            ]
            
            print(f"üéØ Gerando quest√£o para {ano}¬∫ ano...")
            response = self.llm.invoke(
                messages,
                response_format={"type": "json_object"}
            )
            
            # Parse da resposta JSON
            question_data = json.loads(str(response.content))
            
            # Adicionar campos obrigat√≥rios
            formatted_question = {
                "id": self._question_counter,
                "disponivel": True,
                "question": question_data["question"],
                "options": question_data["options"],
                "answer": question_data["answer"]
            }
            
            self._question_counter += 1
            
            print("‚úÖ Quest√£o gerada completa:")
            print(json.dumps(formatted_question, indent=2, ensure_ascii=False))
            print("Gerando √°udio...")
            
            return formatted_question
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar quest√£o: {e}")
            # Quest√£o fallback para garantir funcionamento
            return self._get_fallback_question(ano)
    
    def _get_fallback_question(self, ano: int) -> Dict[str, Any]:
        """Quest√£o de fallback caso a API falhe"""
        fallback_questions = {
            1: {
                "question": "Qual √© a primeira letra da palavra 'CASA'?",
                "options": ["C", "A", "S", "H"],
                "answer": "C"
            },
            2: {
                "question": "Quantas s√≠labas tem a palavra 'GATO'?",
                "options": ["1", "2", "3", "4"],
                "answer": "2"
            },
            3: {
                "question": "Qual palavra rima com 'FLOR'?",
                "options": ["Amor", "Casa", "Livro", "Carro"],
                "answer": "Amor"
            }
        }
        
        base_question = fallback_questions.get(ano, fallback_questions[2])
        
        return {
            "id": self._question_counter,
            "disponivel": True,
            "question": base_question["question"],
            "options": base_question["options"],
            "answer": base_question["answer"]
        }